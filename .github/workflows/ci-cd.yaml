name: Node Express Sample

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" , "feat-**" ]

permissions:
  contents: read

jobs:
  tests:
    # if: false # Skipp job when needed 
    runs-on: self-hosted
    steps:
    # Step 1: obtain repo from GitHub
    - 
      name: Checkout Code
      uses: actions/checkout@v3
    # Step 2: dependencies
    - 
      name: NPM - Install dependencies
      run: |
        npm install
    # Step 5: tests
    - 
      name: NPM - Test
      run: |
        npm run test

  build:
    runs-on: self-hosted
    env:
      DOCKER_REGISTRY: ${{ vars.DOCKER_HUB_NS }}
      DOCKER_IMAGE_NAME: ${{ vars.DOCKER_IMAGE_NAME }}
      GHCR_REGISTRY: ghcr.io
      GHCR_IMAGE_NAME: ${{ github.repository }}
    needs: tests
    permissions:
      packages: write
      contents: read
    steps:
      # Step 1: obtain repo from GitHub
      - 
        name: Checkout Code
        uses: actions/checkout@v3
      # Step 2: Buildx improve
      - 
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      # Step 3: Log to registries
      - 
        name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      # Step 4: Metadata for image name
      - 
        name: Docker metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}
          tags: |
            # dynamically set the branch name and sha as a custom tag
            type=raw,value={{ base_ref }}
      # Step 5: Build and push
      - 
        name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ steps.meta.outputs.tags }}

  deploy:
    runs-on: self-hosted
    needs: build
    steps:
      - 
        name: Deploy to Kubernetes
        run: |
          kubectl apply -f .\Kubernetes\01_app_objects\
